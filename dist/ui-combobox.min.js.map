{"version":3,"sources":["ui-combobox.js"],"names":["combobox","angular","module","constant","appendToBody","closeOnSelect","dropdownPosition","forceSelection","openOnFocus","directive","$document","uiComboboxConfig","require","restrict","templateUrl","transclude","scope","disabled","isOpen","model","required","link","$element","attrs","ctrls","isDefined","onDocumentClick","$event","on","$on","off","controller","$scope","close","open","toggle","replace","ctrl"],"mappings":"CAAC,WACG,YAGA,IAAIA,GAAWC,QAAQC,OAAO,iBAS9BF,GAASG,SAAS,oBAMdC,cAAc,EAOdC,eAAe,EAQfC,iBAAkB,OAQlBC,gBAAgB,EAKhBC,aAAa,IAGjBR,EAASS,UAAU,cACf,YACA,mBACJ,SAASC,EAAWC,GAChB,OACIC,SAAU,WACVC,SAAU,KACVC,YAAa,mBACbC,YAAY,EACZC,OACIC,SAAU,eACVC,OAAQ,KACRC,MAAO,WACPX,YAAa,IACbY,SAAU,gBAEdC,KAAM,SAASL,EAAOM,EAAUC,EAAOC,GAE/BvB,QAAQwB,UAAUF,EAAMN,YACxBD,EAAMC,UAAW,GAIjBhB,QAAQwB,UAAUF,EAAMH,YACxBJ,EAAMI,UAAW,GAIrBJ,EAAML,iBAAmBA,CAEzB,IAAIe,GAAkB,SAASC,IAEtBX,EAAME,OAMfR,GAAUkB,GAAG,QAASF,GAGtBV,EAAMa,IAAI,WAAY,WAClBnB,EAAUoB,IAAI,QAASJ,MAG/BK,YACI,SACA,mBACJ,SAASC,EAAQrB,GACbqB,EAAOC,MAAQ,WACXD,EAAOd,QAAS,GAGpBc,EAAOE,KAAO,WACVF,EAAOd,QAAS,GAGpBc,EAAOG,OAAS,WACZH,EAAOd,QAAUc,EAAOd,cAMxClB,EAASS,UAAU,oBAAqB,WACpC,OACI2B,SAAS,EACTxB,QAAS,cACTC,SAAU,KACVC,YAAa,0BACbC,YAAY,EACZM,KAAM,SAASL,EAAOM,EAAUC,EAAOc","file":"ui-combobox.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    // UI-Combobox module\n    var combobox = angular.module('ui.combobox', []);\n\n    /**\n     * UI-Combox configuration object used to easily set the configuration\n     * options for entire application.\n     *\n     * Note: All matching attribute properties will take predence over configuration.\n     * This is accomplished via the explicit `foo === false` check(s) in the template(s).\n     */\n    combobox.constant('uiComboboxConfig', {\n        /**\n         * Appends the dropdown to the body in order to fix overflow issues. Defaults to `false`.\n         *\n         * todo Implement this correctly (currently does nothing).\n         */\n        appendToBody: false,\n\n        /**\n         * Close the dropdown upon selection. Defaults to `true`.\n         *\n         * todo Implement this correctly (currently does nothing).\n         */\n        closeOnSelect: true,\n\n        /**\n         * The position the dropdown will be rendered when opened.\n         * Accepted values are `'top'`, `'bottom'`, and `'auto'`. Defaults to `'auto'`.\n         *\n         * todo Implement this correctly (currently does nothing).\n         */\n        dropdownPosition: 'auto',\n\n        /**\n         * Force a matching selection to be made. This is to be used when\n         * manually entry is not accepted. Defaults to `false`.\n         *\n         * todo Implement this correctly (currently does nothing).\n         */\n        forceSelection: false,\n\n        /**\n         * Open the dropdown on input focus. Defaults to `false`.\n         */\n        openOnFocus: false\n    });\n\n    combobox.directive('uiCombobox', [\n        '$document',\n        'uiComboboxConfig',\n    function($document, uiComboboxConfig) {\n        return {\n            require: ['ngModel'],\n            restrict: 'AE',\n            templateUrl: 'ui-combobox.html',\n            transclude: true,\n            scope: {\n                disabled: '=?ngDisabled',\n                isOpen: '=?',\n                model: '=ngModel',\n                openOnFocus: '=',\n                required: '=?ngRequired'\n            },\n            link: function(scope, $element, attrs, ctrls) {\n                // Allow users to use native [disabled]\n                if (angular.isDefined(attrs.disabled)) {\n                    scope.disabled = true\n                }\n\n                // Allow users to use native [required]\n                if (angular.isDefined(attrs.required)) {\n                    scope.required = true;\n                }\n\n                // Assign necessary scope var(s)\n                scope.uiComboboxConfig = uiComboboxConfig;\n\n                var onDocumentClick = function($event) {\n                    // Ignore click if closed\n                    if (!scope.isOpen) { return; }\n\n                    // todo add close logic\n                };\n\n                // Listen for document clicks\n                $document.on('click', onDocumentClick);\n\n                // Clean up\n                scope.$on('$destroy', function() {\n                    $document.off('click', onDocumentClick);\n                });\n            },\n            controller: [\n                '$scope',\n                'uiComboboxConfig',\n            function($scope, uiComboboxConfig) {\n                $scope.close = function() {\n                    $scope.isOpen = false;\n                };\n\n                $scope.open = function() {\n                    $scope.isOpen = true;\n                };\n\n                $scope.toggle = function() {\n                    $scope.isOpen = !$scope.isOpen;\n                };\n            }]\n        };\n    }]);\n\n    combobox.directive('uiComboboxChoice', [function() {\n        return {\n            replace: true,\n            require: '^uiCombobox',\n            restrict: 'AE',\n            templateUrl: 'ui-combobox-choice.html',\n            transclude: true,\n            link: function(scope, $element, attrs, ctrl) {\n                // todo implmenet correct link logic\n            }\n        };\n    }]);\n}());\n"],"sourceRoot":"/source/"}